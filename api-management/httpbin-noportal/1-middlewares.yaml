apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: strip-httpbin-prefix
  namespace: apps
spec:
  stripPrefix:
    prefixes:
      - "/httpbin"
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: custom-header
  namespace: apps
spec:
  headers:
    customRequestHeaders:
      X-Custom-Header: "Hello Traefik"
      CF-IPCountry: "ES"

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: ratelimit
  namespace: apps
spec:
  rateLimit:
    average: 10
    burst: 100
    period: 1s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: keycloak-jwt-authentication
  namespace: apps
spec:
  plugin:
    jwt:
      jwksUrl: http://keycloak-service.traefik-security.svc:8080/realms/traefik/protocol/openid-connect/certs
      forwardHeaders:
        Group: group
        Email: email
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: waf
  namespace: apps
spec:
  plugin:
    coraza:
      crsEnabled: true
      directives:
        - SecRuleEngine On
        - SecRule REQUEST_URI "@streq /anything/admin" "id:101,phase:1,t:lowercase,log,deny"
        - SecRule REQUEST_METHOD "@streq GET" "id:201,phase:1,log,deny,status:403,msg:'Blocked GET containing /admin',chain"
        - SecRule REQUEST_URI "@rx /admin"
        - Include @owasp_crs/REQUEST-911-METHOD-ENFORCEMENT.conf
        - Include @owasp_crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf
        - Include @owasp_crs/REQUEST-933-APPLICATION-ATTACK-PHP.conf
        - Include @owasp_crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: cache
  namespace: apps
spec:
  plugin:
    httpCache:
      maxTtl: 600
      store:
        memory:
          limit: "3Gi"

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: opa-allow-jwt-claim
  namespace: apps
spec:
  plugin:
    opa:
      allow: "data.opa.feedback.allow"
      policy: |
        package opa.feedback
        
        default allow = false
        encoded = split(input.headers["Authorization"], " ")[1]
        payload = io.jwt.decode(encoded)[1]

        # Check if user has verified their email
        email_verified {
          payload["email_verified"] == true
        }

        allow {
          email_verified
        }